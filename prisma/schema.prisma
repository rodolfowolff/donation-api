generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  firstName        String            @db.VarChar(20)
  lastName         String            @db.VarChar(20)
  email            String            @unique @db.VarChar(50)
  password         String            @db.VarChar(100)
  status           Status            @default(ACTIVE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  userPersonalData UserPersonalData?
  userAddress      UserAddress?

  Donation Donation[]
  @@map("users")
}

model UserPersonalData {
  id        String    @id @default(uuid())
  userId    String    @unique
  document  String    @unique @db.VarChar(11)
  birthDate String    @db.VarChar(10)
  telephone String    @db.VarChar(11)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("user_personal_data")
}

model UserAddress {
  id           String    @id @default(uuid())
  userId       String    @unique
  zipCode      String    @db.VarChar(8)
  street       String    @db.VarChar(50)
  number       String    @db.VarChar(10)
  complement   String?   @db.VarChar(50)
  neighborhood String    @db.VarChar(50)
  city         String    @db.VarChar(50)
  state        String    @db.VarChar(2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("user_address")
}

model Ong {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(80)
  email     String    @unique @db.VarChar(50)
  password  String    @db.VarChar(100)
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  ongPersonalData OngPersonalData?
  ongAddress      OngAddress?

  Donation Donation[]
  @@map("ongs")
}

model OngPersonalData {
  id          String    @id @default(uuid())
  ongId       String    @unique
  document    String    @unique @db.VarChar(14)
  description String    @db.VarChar(200)
  banner      String?   @db.VarChar(200)
  phone       String?   @db.VarChar(10)
  telephone   String    @db.VarChar(11)
  website     String?   @db.VarChar(50)
  facebook    String?   @db.VarChar(50)
  instagram   String?   @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  ong Ong @relation(fields: [ongId], references: [id])

  @@map("ong_personal_data")
}

model OngAddress {
  id           String    @id @default(uuid())
  ongId        String    @unique
  zipCode      String    @db.VarChar(8)
  street       String    @db.VarChar(50)
  number       String    @db.VarChar(10)
  complement   String?   @db.VarChar(50)
  neighborhood String    @db.VarChar(50)
  city         String    @db.VarChar(50)
  state        String    @db.VarChar(2)
  latitude     Decimal?  @db.Decimal(10, 6)
  longitude    Decimal?  @db.Decimal(10, 6)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  ong Ong @relation(fields: [ongId], references: [id])

  @@map("ong_address")
}

model Donation {
  id        String    @id @default(uuid())
  userId    String    @unique
  ongId     String    @unique
  value     Int
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
  ong  Ong  @relation(fields: [ongId], references: [id])

  @@map("donations")
}

model Faq {
  id        String    @id @default(uuid())
  question  String    @db.VarChar(200)
  answer    String    @db.VarChar(200)
  type      FaqType   @default(GENERAL)
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("faqs")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum FaqType {
  GENERAL
  ONG
  DONOR
}
